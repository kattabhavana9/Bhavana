import random
from sklearn.tree import DecisionTreeClassifier

class AWS:
    def __init__(self):
        self.metal_bin = []
        self.wet_bin = []
        self.dry_bin = []
        self.classifier = DecisionTreeClassifier()
        self.metal_servo = ServoMotor("Metal Bin")  # Servo for metal waste
        self.wet_servo = ServoMotor("Wet Bin")    # Servo for wet waste
        self.dry_servo = ServoMotor("Dry Bin")    # Servo for dry waste
        self.microcontroller = Microcontroller(self.classifier)
        self.display = OutputDisplay()
        self.emergency_stop = False

    def classify_waste(self, item):
        if self.emergency_stop:
            return

        # Simulate sensor data (infrared, metal, and moisture)
        infrared_sensor = InfraredSensor()
        metal_sensor = MetalSensor()
        moisture_sensor = MoistureSensor()
        has_metal = metal_sensor.detect(item)
        is_wet = moisture_sensor.detect(item)
        waste_type = self.microcontroller.classify_waste(has_metal, is_wet)

        if waste_type == 'Metal':
            self.metal_servo.move()
            self.metal_bin.append(item)
        elif waste_type == 'Wet':
            self.wet_servo.move()
            self.wet_bin.append(item)
        else:
            self.dry_servo.move()
            self.dry_bin.append(item)

    def train_classifier(self, training_data, labels):
        # Train the classifier with labeled data
        self.classifier.fit(training_data, labels)

    def display_bins(self):
        print("Metal Waste:", self.metal_bin)
        print("Wet Waste:", self.wet_bin)
        print("Dry Waste:", self.dry_bin)

    def activate_emergency_stop(self):
        self.emergency_stop = True
        self.display.display("Emergency Stop Activated")

    def deactivate_emergency_stop(self):
        self.emergency_stop = False
        self.display.display("Emergency Stop Deactivated")

class ServoMotor:
    def __init__(self, bin_name):
        self.bin_name = bin_name

    def move(self):
        # Simulate the physical movement of the servo motor
        print(f"Servo motor moves to guide waste into the {self.bin_name}.")

class InfraredSensor:
    def detect(self):
        # Simulate infrared detection
        return random.choice([True, False])

class MetalSensor:
    def detect(self, item):
        # Simulate metal detection
        return "metal" in item.lower()

class MoistureSensor:
    def detect(self, item):
        # Simulate moisture detection
        return "wet" in item.lower()

class Microcontroller:
    def __init__(self, classifier):
        self.classifier = classifier

    def classify_waste(self, has_metal, is_wet):
        # Machine learning-based classification
        waste_type = self.classifier.predict([[has_metal, is_wet]])[0]
        return waste_type

class OutputDisplay:
    def display(self, message):
        # Simulate output display
        print(message)

if __name__ == "__main__":
    aws_system = AWS()

    # Simulate waste input and labeled data for training
    waste_items = ["Plastic bottle", "Aluminum can", "Food waste", "Cardboard box"]
    labels = ['Dry', 'Metal', 'Wet', 'Dry']
    training_data = [[int(MetalSensor().detect(item)), int(MoistureSensor().detect(item))] for item in waste_items]
    
    # Train the classifier
    aws_system.train_classifier(training_data, labels)

    for item in waste_items:
        aws_system.classify_waste(item)

    # Display the contents of the bins
    aws_system.display_bins()
    
    # Simulate activating and deactivating the emergency stop
    aws_system.activate_emergency_stop()
    aws_system.classify_waste("Plastic bottle")
    aws_system.deactivate_emergency_stop()
    aws_system.classify_waste("Paper waste")
